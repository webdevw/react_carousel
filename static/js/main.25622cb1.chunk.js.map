{"version":3,"sources":["components/Carousel.tsx","App.tsx","index.tsx"],"names":["Carousel","state","offset","itemShift","endOfSlides","startOfSlides","handleScroll","step","itemWidth","direction","imagesLength","frameSize","infinite","prevOffset","prevSteps","scroll","lastSlides","newOffset","countSteps","setState","prevProps","this","props","images","length","animationDuration","className","style","maxWidth","right","transitionDuration","map","image","index","src","alt","width","type","onClick","disabled","React","Component","App","handleChange","event","target","name","value","handleChangeInfinite","checked","htmlFor","min","id","onChange","defaultChecked","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.25622cb1.chunk.js","sourcesContent":["import React from 'react';\nimport './Carousel.scss';\n\ntype State = {\n  offset: number,\n  itemShift: number,\n};\n\ntype Props = {\n  images: string[],\n  itemWidth: number,\n  frameSize: number,\n  step: number,\n  animationDuration: number,\n  infinite: boolean,\n};\n\nexport class Carousel extends React.Component<Props, State> {\n  state: Readonly<State> = {\n    offset: 0,\n    itemShift: 0,\n  };\n\n  endOfSlides = false;\n\n  startOfSlides = true;\n\n  componentDidUpdate(prevProps: Props) {\n    const {\n      itemWidth,\n      frameSize,\n      images,\n    } = this.props;\n    const { offset, itemShift } = this.state;\n\n    if (offset > 0) {\n      if (itemWidth !== prevProps.itemWidth) {\n        this.setState({\n          offset: itemWidth * itemShift,\n        });\n      }\n    }\n\n    if (frameSize > prevProps.frameSize) {\n      this.handleScroll(\n        0,\n        itemWidth,\n        'next',\n        images.length,\n        frameSize,\n        false,\n      );\n    }\n  }\n\n  handleScroll = (\n    step: number,\n    itemWidth: number,\n    direction: 'next' | 'prev',\n    imagesLength: number,\n    frameSize: number,\n    infinite: boolean,\n  ) => {\n    const {\n      offset: prevOffset,\n      itemShift: prevSteps,\n    } = this.state;\n    const scroll = step * itemWidth;\n    const frameWidth = frameSize * itemWidth;\n    const maxWidthSlides = imagesLength * itemWidth;\n    const lastSlides = maxWidthSlides - frameWidth;\n\n    let newOffset = (direction === 'next'\n      ? (\n        prevOffset + scroll\n      ) : (\n        prevOffset - scroll\n      ));\n\n    let countSteps = (direction === 'next'\n      ? (\n        prevSteps + step\n      ) : (\n        prevSteps - step\n      ));\n\n    if (countSteps < 0) {\n      countSteps = 0;\n    }\n\n    if (countSteps > imagesLength - frameSize) {\n      countSteps = imagesLength - frameSize;\n    }\n\n    // infinite start\n\n    if (infinite) {\n      if (newOffset > lastSlides && this.endOfSlides) {\n        newOffset = 0;\n        this.endOfSlides = false;\n        this.startOfSlides = true;\n      }\n\n      if (newOffset >= lastSlides && !this.endOfSlides) {\n        newOffset = lastSlides;\n        this.endOfSlides = true;\n      }\n\n      if (newOffset < 0 && this.startOfSlides) {\n        newOffset = lastSlides;\n        this.startOfSlides = false;\n        this.endOfSlides = true;\n      }\n\n      if (newOffset <= 0 && !this.startOfSlides) {\n        newOffset = 0;\n        this.startOfSlides = true;\n      }\n    }\n\n    if (!infinite) {\n      if (newOffset >= lastSlides) {\n        newOffset = lastSlides;\n      }\n\n      if (newOffset < 0) {\n        newOffset = 0;\n      }\n    }\n\n    this.setState({\n      offset: newOffset,\n      itemShift: countSteps,\n    });\n  };\n\n  render() {\n    const { offset, itemShift } = this.state;\n    const {\n      images,\n      itemWidth,\n      frameSize,\n      step,\n      animationDuration,\n      infinite,\n    } = this.props;\n\n    return (\n      <div\n        className=\"Carousel\"\n        style={\n          { maxWidth: `${frameSize * itemWidth}px` }\n        }\n      >\n        <ul\n          className=\"Carousel__list\"\n          style={\n            {\n              right: `${offset}px`,\n              transitionDuration: `${animationDuration}ms`,\n            }\n          }\n        >\n          {images.map((image, index) => (\n            <li key={image}>\n              <img\n                src={image}\n                alt={`slide ${index + 1}`}\n                width={itemWidth}\n              />\n            </li>\n          ))}\n        </ul>\n\n        <div className=\"containerBtn\">\n          <button\n            type=\"button\"\n            className=\"button prev\"\n            onClick={() => {\n              this.handleScroll(\n                step,\n                itemWidth,\n                'prev',\n                images.length,\n                frameSize,\n                infinite,\n              );\n            }}\n            disabled={\n              (\n                infinite\n                  ? false\n                  : itemShift === 0\n              )\n            }\n          >\n            ⇚\n          </button>\n          <button\n            data-cy=\"next\"\n            type=\"button\"\n            className=\"button next\"\n            onClick={() => {\n              this.handleScroll(\n                step,\n                itemWidth,\n                'next',\n                images.length,\n                frameSize,\n                infinite,\n              );\n            }}\n            disabled={\n              (\n                infinite\n                  ? false\n                  : (itemShift === images.length - frameSize)\n              )\n            }\n          >\n            ⇛\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport './App.scss';\nimport { Carousel } from './components/Carousel';\n\ninterface State {\n  images: string[];\n  itemWidth: number;\n  frameSize: number;\n  step: number;\n  animationDuration: number;\n  infinite: boolean;\n}\n\nclass App extends React.Component<{}, State> {\n  state = {\n    images: [\n      './img/1.png',\n      './img/2.png',\n      './img/3.png',\n      './img/4.png',\n      './img/5.png',\n      './img/6.png',\n      './img/7.png',\n      './img/8.png',\n      './img/9.png',\n      './img/10.png',\n    ],\n    itemWidth: 130,\n    frameSize: 3,\n    step: 3,\n    animationDuration: 1000,\n    infinite: false,\n  };\n\n  handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState(state => (\n      {\n        ...state,\n        [event.target.name]: +event.target.value,\n      }));\n  };\n\n  handleChangeInfinite = (event: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState(state => (\n      {\n        ...state,\n        [event.target.name]: event.target.checked,\n      }));\n  };\n\n  render() {\n    const {\n      images,\n      itemWidth,\n      frameSize,\n      step,\n      animationDuration,\n      infinite,\n    } = this.state;\n\n    return (\n      <div className=\"App\">\n        {/* eslint-disable-next-line */}\n        <h1 data-cy=\"title\">Carousel with {images.length} images</h1>\n\n        <Carousel\n          images={images}\n          itemWidth={itemWidth}\n          frameSize={frameSize}\n          step={step}\n          animationDuration={animationDuration}\n          infinite={infinite}\n        />\n\n        <div className=\"form\">\n          <label htmlFor=\"itemId\">\n            <input\n              type=\"number\"\n              min={0}\n              id=\"itemId\"\n              value={itemWidth}\n              name=\"itemWidth\"\n              onChange={(event) => (\n                this.handleChange(event)\n              )}\n            />\n            <span>slide width in px</span>\n          </label>\n\n          <label htmlFor=\"frameId\">\n            <input\n              value={frameSize}\n              type=\"number\"\n              min={1}\n              id=\"frameId\"\n              name=\"frameSize\"\n              onChange={(event) => (\n                this.handleChange(event)\n              )}\n            />\n            <span>slide frame Size</span>\n          </label>\n\n          <label htmlFor=\"stepId\">\n            <input\n              value={step}\n              type=\"number\"\n              min={1}\n              id=\"stepId\"\n              name=\"step\"\n              onChange={(event) => (\n                this.handleChange(event)\n              )}\n            />\n            <span>slide step</span>\n          </label>\n\n          <label htmlFor=\"animationId\">\n            <input\n              value={animationDuration}\n              name=\"animationDuration\"\n              type=\"number\"\n              min={0}\n              id=\"animationId\"\n              onChange={(event) => (\n                this.handleChange(event)\n              )}\n            />\n            <span>slide animation time</span>\n          </label>\n\n          <label htmlFor=\"infinite\">\n            <input\n              type=\"checkbox\"\n              name=\"infinite\"\n              defaultChecked={false}\n              id=\"infinite\"\n              onChange={(event) => (\n                this.handleChangeInfinite(event)\n              )}\n            />\n            <span>infinite slides</span>\n          </label>\n\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}