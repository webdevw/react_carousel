{"version":3,"sources":["components/Carousel.tsx","App.tsx","index.tsx"],"names":["Carousel","state","offset","handleScroll","step","itemWidth","direction","imagesLength","frameSize","infinite","prevOffset","scroll","maxWidthSlides","lastSlides","newOffset","setState","this","props","images","animationDuration","className","style","maxWidth","right","transitionDuration","map","image","index","src","alt","toString","width","type","onClick","length","React","Component","App","handlePropsCarousel","property","value","htmlFor","id","defaultValue","onChange","event","target","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.aea4f14a.chunk.js","sourcesContent":["import React from 'react';\nimport './Carousel.scss';\n\ntype State = {\n  offset: number,\n};\n\ntype Props = {\n  images: string[],\n  itemWidth: number,\n  frameSize: number,\n  step: number,\n  animationDuration: number,\n  infinite: boolean,\n};\n\nexport class Carousel extends React.Component<Props, State> {\n  state: Readonly<State> = {\n    offset: 0,\n  };\n\n  handleScroll = (\n    step: number,\n    itemWidth: number,\n    direction: 'next' | 'prev',\n    imagesLength: number,\n    frameSize: number,\n    infinite: boolean,\n  ) => {\n    const prevOffset = this.state.offset;\n    const scroll = step * itemWidth;\n    const frameWidth = frameSize * itemWidth;\n    const maxWidthSlides = imagesLength * itemWidth;\n\n    const lastSlides = maxWidthSlides - frameWidth;\n    let newOffset = (direction === 'next'\n      ? (\n        prevOffset + scroll\n      ) : (\n        prevOffset - scroll\n      ));\n\n    if (infinite) {\n      if (newOffset >= maxWidthSlides) {\n        newOffset = 0;\n      }\n\n      if (newOffset < 0) {\n        newOffset = lastSlides;\n      }\n    } else {\n      if (newOffset >= lastSlides) {\n        newOffset = lastSlides;\n      }\n\n      if (newOffset < 0) {\n        newOffset = 0;\n      }\n    }\n\n    this.setState({\n      offset: newOffset,\n    });\n  };\n\n  render() {\n    const { offset } = this.state;\n    const {\n      images,\n      itemWidth,\n      frameSize,\n      step,\n      animationDuration,\n      infinite,\n    } = this.props;\n\n    return (\n      <div\n        className=\"Carousel\"\n        style={\n          { maxWidth: `${frameSize * itemWidth}px` }\n        }\n      >\n        <ul\n          className=\"Carousel__list\"\n          style={\n            {\n              right: `${offset}px`,\n              transitionDuration: `${animationDuration}ms`,\n            }\n          }\n        >\n          {images.map((image, index) => (\n            <li key={image}>\n              <img\n                src={image}\n                alt={(index + 1).toString()}\n                width={itemWidth}\n              />\n            </li>\n          ))}\n        </ul>\n\n        <button\n          type=\"button\"\n          onClick={() => {\n            this.handleScroll(\n              step,\n              itemWidth,\n              'prev',\n              images.length,\n              frameSize,\n              infinite,\n            );\n          }}\n        >\n          Prev\n        </button>\n        <button\n          data-cy=\"next\"\n          type=\"button\"\n          onClick={() => {\n            this.handleScroll(\n              step,\n              itemWidth,\n              'next',\n              images.length,\n              frameSize,\n              infinite,\n            );\n          }}\n        >\n          Next\n        </button>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport './App.scss';\nimport { Carousel } from './components/Carousel';\n\ninterface State {\n  images: string[];\n  itemWidth: number;\n  frameSize: number;\n  step: number;\n  animationDuration: number;\n  infinite: boolean;\n}\n\ntype PropCarousel = (\n  'itemWidth'\n  | 'frameSize'\n  | 'step'\n  | 'animationDuration'\n);\n\nclass App extends React.Component<{}, State> {\n  state = {\n    images: [\n      './img/1.png',\n      './img/2.png',\n      './img/3.png',\n      './img/4.png',\n      './img/5.png',\n      './img/6.png',\n      './img/7.png',\n      './img/8.png',\n      './img/9.png',\n      './img/10.png',\n    ],\n    itemWidth: 130,\n    frameSize: 3,\n    step: 3,\n    animationDuration: 1000,\n    infinite: false,\n  };\n\n  handlePropsCarousel = (property: PropCarousel, value: number) => {\n    switch (property) {\n      case 'itemWidth':\n        this.setState({\n          itemWidth: value,\n        });\n        break;\n\n      case 'animationDuration':\n        this.setState({\n          animationDuration: value,\n        });\n        break;\n\n      case 'frameSize':\n        this.setState({\n          frameSize: value,\n        });\n        break;\n\n      case 'step':\n        this.setState({\n          step: value,\n        });\n        break;\n      default:\n        break;\n    }\n  };\n\n  render() {\n    const {\n      images,\n      itemWidth,\n      frameSize,\n      step,\n      animationDuration,\n      infinite,\n    } = this.state;\n\n    return (\n      <div className=\"App\">\n        {/* eslint-disable-next-line */}\n        <h1 data-cy=\"title\">Carousel with {images.length} images</h1>\n\n        <Carousel\n          images={images}\n          itemWidth={itemWidth}\n          frameSize={frameSize}\n          step={step}\n          animationDuration={animationDuration}\n          infinite={infinite}\n        />\n\n        <div className=\"form\">\n          <label htmlFor=\"ItemWidth\">\n            <input\n              type=\"number\"\n              id=\"ItemWidth\"\n              defaultValue={itemWidth}\n              onChange={(event) => (\n                this.handlePropsCarousel(\n                  'itemWidth',\n                  +event.target.value,\n                )\n              )}\n            />\n            <span>slide width in px</span>\n          </label>\n\n          <label htmlFor=\"FrameSize\">\n            <input\n              defaultValue={frameSize}\n              type=\"number\"\n              id=\"FrameSize\"\n              onChange={(event) => (\n                this.handlePropsCarousel(\n                  'frameSize',\n                  +event.target.value,\n                )\n              )}\n            />\n            <span>slide frame Size</span>\n          </label>\n\n          <label htmlFor=\"step\">\n            <input\n              defaultValue={step}\n              type=\"number\"\n              id=\"step\"\n              onChange={(event) => (\n                this.handlePropsCarousel(\n                  'step',\n                  +event.target.value,\n                )\n              )}\n            />\n            <span>slide step</span>\n          </label>\n\n          <label htmlFor=\"animationDuration\">\n            <input\n              defaultValue={animationDuration}\n              type=\"number\"\n              id=\"animationDuration\"\n              onChange={(event) => (\n                this.handlePropsCarousel(\n                  'animationDuration',\n                  +event.target.value,\n                )\n              )}\n            />\n            <span>slide animation time</span>\n          </label>\n\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}