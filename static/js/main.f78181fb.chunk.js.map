{"version":3,"sources":["components/Carousel.tsx","App.tsx","index.tsx"],"names":["Carousel","state","offset","itemShift","handleScroll","step","itemWidth","direction","imagesLength","frameSize","infinite","prevOffset","prevSteps","scroll","maxWidthSlides","lastSlides","newOffset","countSteps","setState","prevProps","this","props","images","length","animationDuration","className","style","maxWidth","right","transitionDuration","map","image","index","src","alt","toString","width","type","onClick","disabled","React","Component","App","handlePropsCarousel","property","value","htmlFor","min","id","defaultValue","onChange","event","target","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f78181fb.chunk.js","sourcesContent":["import React from 'react';\nimport './Carousel.scss';\n\ntype State = {\n  offset: number,\n  itemShift: number,\n};\n\ntype Props = {\n  images: string[],\n  itemWidth: number,\n  frameSize: number,\n  step: number,\n  animationDuration: number,\n  infinite: boolean,\n};\n\nexport class Carousel extends React.Component<Props, State> {\n  state: Readonly<State> = {\n    offset: 0,\n    itemShift: 0,\n  };\n\n  componentDidUpdate(prevProps: Props) {\n    const {\n      itemWidth,\n      frameSize,\n      images,\n    } = this.props;\n    const { offset, itemShift } = this.state;\n\n    if (offset > 0) {\n      if (itemWidth !== prevProps.itemWidth) {\n        this.setState({\n          offset: itemWidth * itemShift,\n        });\n      }\n    }\n\n    if (frameSize > prevProps.frameSize) {\n      this.handleScroll(\n        0,\n        itemWidth,\n        'next',\n        images.length,\n        frameSize,\n        false,\n      );\n    }\n  }\n\n  handleScroll = (\n    step: number,\n    itemWidth: number,\n    direction: 'next' | 'prev',\n    imagesLength: number,\n    frameSize: number,\n    infinite: boolean,\n  ) => {\n    const prevOffset = this.state.offset;\n    const prevSteps = this.state.itemShift;\n    const scroll = step * itemWidth;\n    const frameWidth = frameSize * itemWidth;\n    const maxWidthSlides = imagesLength * itemWidth;\n    const lastSlides = maxWidthSlides - frameWidth;\n    let newOffset = (direction === 'next'\n      ? (\n        prevOffset + scroll\n      ) : (\n        prevOffset - scroll\n      ));\n    // sarting\n    let countSteps = (direction === 'next'\n      ? (\n        prevSteps + step\n      ) : (\n        prevSteps - step\n      ));\n\n    if (countSteps < 0) {\n      countSteps = 0;\n    }\n\n    if (countSteps > imagesLength - frameSize) {\n      countSteps = imagesLength - frameSize;\n    }\n\n    if (infinite) {\n      if (newOffset >= maxWidthSlides) {\n        newOffset = 0;\n      }\n\n      if (newOffset < 0) {\n        newOffset = lastSlides;\n      }\n    } else {\n      if (newOffset >= lastSlides) {\n        newOffset = lastSlides;\n      }\n\n      if (newOffset < 0) {\n        newOffset = 0;\n      }\n    }\n\n    this.setState({\n      offset: newOffset,\n      itemShift: countSteps,\n    });\n  };\n\n  render() {\n    const { offset, itemShift } = this.state;\n    const {\n      images,\n      itemWidth,\n      frameSize,\n      step,\n      animationDuration,\n      infinite,\n    } = this.props;\n\n    return (\n      <div\n        className=\"Carousel\"\n        style={\n          { maxWidth: `${frameSize * itemWidth}px` }\n        }\n      >\n        <ul\n          className=\"Carousel__list\"\n          style={\n            {\n              right: `${offset}px`,\n              transitionDuration: `${animationDuration}ms`,\n            }\n          }\n        >\n          {images.map((image, index) => (\n            <li key={image}>\n              <img\n                src={image}\n                alt={(index + 1).toString()}\n                width={itemWidth}\n              />\n            </li>\n          ))}\n        </ul>\n\n        <div className=\"containerBtn\">\n          <button\n            type=\"button\"\n            className=\"button prev\"\n            onClick={() => {\n              this.handleScroll(\n                step,\n                itemWidth,\n                'prev',\n                images.length,\n                frameSize,\n                infinite,\n              );\n            }}\n            disabled={\n              itemShift === 0 && true\n            }\n          >\n            ⇚\n          </button>\n          <button\n            data-cy=\"next\"\n            type=\"button\"\n            className=\"button next\"\n            onClick={() => {\n              this.handleScroll(\n                step,\n                itemWidth,\n                'next',\n                images.length,\n                frameSize,\n                infinite,\n              );\n            }}\n            disabled={\n              (itemShift === images.length - frameSize) && true\n            }\n          >\n            ⇛\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport './App.scss';\nimport { Carousel } from './components/Carousel';\n\ninterface State {\n  images: string[];\n  itemWidth: number;\n  frameSize: number;\n  step: number;\n  animationDuration: number;\n  infinite: boolean;\n}\n\ntype PropCarousel = (\n  'itemWidth'\n  | 'frameSize'\n  | 'step'\n  | 'animationDuration'\n);\n\nclass App extends React.Component<{}, State> {\n  state = {\n    images: [\n      './img/1.png',\n      './img/2.png',\n      './img/3.png',\n      './img/4.png',\n      './img/5.png',\n      './img/6.png',\n      './img/7.png',\n      './img/8.png',\n      './img/9.png',\n      './img/10.png',\n    ],\n    itemWidth: 130,\n    frameSize: 3,\n    step: 3,\n    animationDuration: 1000,\n    infinite: false,\n  };\n\n  handlePropsCarousel = (property: PropCarousel, value: number) => {\n    switch (property) {\n      case 'itemWidth':\n        this.setState({\n          itemWidth: value,\n        });\n        break;\n\n      case 'animationDuration':\n        this.setState({\n          animationDuration: value,\n        });\n        break;\n\n      case 'frameSize':\n        this.setState({\n          frameSize: value,\n        });\n        break;\n\n      case 'step':\n        this.setState({\n          step: value,\n        });\n        break;\n      default:\n        break;\n    }\n  };\n\n  render() {\n    const {\n      images,\n      itemWidth,\n      frameSize,\n      step,\n      animationDuration,\n      infinite,\n    } = this.state;\n\n    return (\n      <div className=\"App\">\n        {/* eslint-disable-next-line */}\n        <h1 data-cy=\"title\">Carousel with {images.length} images</h1>\n\n        <Carousel\n          images={images}\n          itemWidth={itemWidth}\n          frameSize={frameSize}\n          step={step}\n          animationDuration={animationDuration}\n          infinite={infinite}\n        />\n\n        <div className=\"form\">\n          <label htmlFor=\"itemId\">\n            <input\n              type=\"number\"\n              min={0}\n              id=\"itemId\"\n              defaultValue={itemWidth}\n              onChange={(event) => (\n                this.handlePropsCarousel(\n                  'itemWidth',\n                  +event.target.value,\n                )\n              )}\n            />\n            <span>slide width in px</span>\n          </label>\n\n          <label htmlFor=\"frameId\">\n            <input\n              defaultValue={frameSize}\n              type=\"number\"\n              min={1}\n              id=\"frameId\"\n              onChange={(event) => (\n                this.handlePropsCarousel(\n                  'frameSize',\n                  +event.target.value,\n                )\n              )}\n            />\n            <span>slide frame Size</span>\n          </label>\n\n          <label htmlFor=\"stepId\">\n            <input\n              defaultValue={step}\n              type=\"number\"\n              min={1}\n              id=\"stepId\"\n              onChange={(event) => (\n                this.handlePropsCarousel(\n                  'step',\n                  +event.target.value,\n                )\n              )}\n            />\n            <span>slide step</span>\n          </label>\n\n          <label htmlFor=\"animationId\">\n            <input\n              defaultValue={animationDuration}\n              type=\"number\"\n              min={0}\n              id=\"animationId\"\n              onChange={(event) => (\n                this.handlePropsCarousel(\n                  'animationDuration',\n                  +event.target.value,\n                )\n              )}\n            />\n            <span>slide animation time</span>\n          </label>\n\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}